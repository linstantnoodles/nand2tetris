// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int ram;
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freeList = 2048;
        let heap[0] = 0; // Next
        let heap[1] = 14335; // Size
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array curr_addr;
        var int new_free_block;
        var int curr_size;
        let curr_addr = freeList; 
        
        while (~(curr_addr[0] = 0)) {
            let curr_size = curr_addr[1];
            if (curr_size > (size + 2)) {
                let new_free_block = curr_addr + (size + 2);
                let new_free_block[0] = 0;
                let new_free_block[1] = curr_size - size;
                let freeList = new_free_block;
                return curr_addr;
            }
            let curr_addr = curr_addr[0];
        }

        if (curr_addr[0] = 0) { 
            let curr_size = curr_addr[1];
            if (curr_size > (size + 2)) {
                let new_free_block = curr_addr + (size + 2);
                let new_free_block[0] = 0;
                let new_free_block[1] = curr_size - size;
                let freeList = new_free_block;
                let curr_addr[1] = size;
                return curr_addr;
            }
        }

        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array curr_addr;
        let curr_addr = freeList; 
        while (~(curr_addr[0] = 0)) {
            let curr_addr = curr_addr[0];
        }
        let curr_addr[0] = o;
        let o[0] = 0;
        return;
    }    
}
